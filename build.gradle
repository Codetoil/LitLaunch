plugins {
    id 'java-library'
    id 'groovy'
    id 'idea'
    id 'vscode'
    id 'eclipse'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
}

class ProjectChecker {
    final String projectName
    long numChecks = 0

    ProjectChecker(String projectName)
    {
        this.projectName = projectName
    }

    Project lookForProjectGivenPrefix(Project thisProject, String prefix)
    {
        Project projectObject;
        if (projectObject == null) {
            projectObject = thisProject.findProject(prefix.concat(projectName))
            System.out.println("" + numChecks++ + ". ".concat(projectObject.toString()))
            if (projectObject == null) {
                projectObject = thisProject.findProject(":".concat(prefix.concat(projectName)))
                System.out.println("" + numChecks++ + ". ".concat(projectObject.toString()))
                if (projectObject == null) {
                    projectObject = thisProject.findProject("..:".concat(prefix.concat(projectName)))
                    System.out.println("" + numChecks++ + ". ".concat(projectObject.toString()))
                    if (projectObject == null) {
                        projectObject = thisProject.findProject(":..:".concat(prefix.concat(projectName)))
                        System.out.println("" + numChecks++ + ". ".concat(projectObject.toString()))
                    }
                }
            }
        }
        return projectObject;
    }

    Project lookForProject(Project thisProject)
    {
        Project projectObject;
        projectObject = this.lookForProjectGivenPrefix(thisProject, "")
        if (projectObject == null) {
            projectObject = this.lookForProjectGivenPrefix(thisProject, "LitLaunch:")
        }
        return projectObject;
    }
}

@SuppressWarnings("unused")
static Project toProject(Object thisProject, String projectName)
{
    Project projectObject
    System.out.println("Find ".concat(projectName))
    projectObject = new ProjectChecker(projectName).lookForProject(thisProject)
    if (projectObject != null) return projectObject
    throw new UnknownProjectException("Cannot find project ".concat(projectName))
}

Project parentProject = this.getProject();

subprojects((Project localProject) -> {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'vscode'
    apply plugin: 'maven-publish'
    apply plugin: 'org.cadixdev.licenser'

    sourceCompatibility = '17'
    targetCompatibility = '17'

    dependencies {
        compileOnlyApi('com.google.code.gson:gson:2.9.1')
        compileOnlyApi('com.google.guava:guava:31.1-jre')
        compileOnlyApi('net.sf.jopt-simple:jopt-simple:5.0.4')
        compileOnlyApi('org.apache.logging.log4j:log4j-core:2.18.0')
        compileOnlyApi('org.apache.commons:commons-lang3:3.12.0')
    }

    localProject.group = parentProject.litlaunchGroup + "." + parentProject.litlaunchId
    localProject.version = localProject.findProperty("version1")
    localProject.archivesBaseName = localProject.findProperty("archive1")
})

subprojects.forEach((Project localProject) -> {
    publishing {
        publications {
            if (!localProject.getName().equals("litlaunch-libraries") && !localProject.getName().equals("LitLaunch")
                && (parent == null))
            {
                create("maven-" + localProject.getName(), MavenPublication) {
                    pom {
                        groupId = parentProject.litlaunchGroup + "." + parentProject.litlaunchId
                        version = ""
                        artifactId = ""
                        licenses {
                            license {
                                name = 'GNU Lesser General Public License v3.0 only'
                                url = 'https://www.gnu.org/licenses/lgpl-3.0-standalone.html'
                            }
                        }
                        developers {
                            developer {
                                id = 'codetoil'
                                name = 'Anthony Michalek'
                                email = 'ianthisawesomee@gmail.com'
                            }
                        }
                        scm {
                            connection = 'scm:git:git://github.com/Codetoil/LitLaunch-Source.git'
                            developerConnection = 'scm:git:ssh://github.com/Codetoil/LitLaunch-Source.git'
                            url = 'https://github.com/Codetoil/LitLaunch-Source'
                        }

                        from localProject.components.java
                    }
                }
            }
        }
    }
})

allprojects {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven {
            name "Gradle Plugins"
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name "Gradle Plugins"
            url "https://repo.spring.io/release"
        }
        maven {
            name "JBoss Repository"
            url "https://repository.jboss.org/maven2"
        }
        maven {
            name "Sonatype"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name "Repo1Maven2"
            url "https://repo1.maven.org/maven2"
        }
        mavenLocal()
    }

    license {
        header = parentProject.file('../HEADER.txt')
        include '**/*.java'
        include '**/*.gradle'
        properties {
            name = 'Codetoil'
            year = LocalDate.now().getYear()
        }
    }
}