package io.github.codetoil.litlaunch.api.dependency_types;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>dependency-types</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("dependency-types") 
@Runtime(CRuntime.class) 
public class DependencyTypesLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/dependency-types.h:4</i>
	 */
	public enum EnumDependencyRequirement implements IntValuedEnum<EnumDependencyRequirement > {
		INCOMPATIBLE(0),
		COMPATIBLE(1),
		REQUIRED(2);
		EnumDependencyRequirement(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<EnumDependencyRequirement > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<EnumDependencyRequirement > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
}
