package io.github.codetoil.litlaunch.api.library_api;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.PointerIO;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>litlaunch-library-api</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("litlaunch-library-api") 
@Runtime(CRuntime.class) 
public class LitlaunchLibraryApiLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h</i> */
	public static final String NAME = "LitLaunch Library API";
	/** <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h</i> */
	public static final String VERSION = "0.1.0+build.2";
	/**
	 * Original signature : <code>ISoftware* createSoftwareStruct(const char[], const char[])</code><br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h:33</i>
	 */
	public static Pointer<Software > createSoftwareStruct(Pointer<Byte > name, Pointer<Byte > version) {
		return Pointer.pointerToAddress(createSoftwareStruct(Pointer.getPeer(name), Pointer.getPeer(version)), PointerIO.getInstance(Software.class));
	}
	@Ptr 
	protected native static long createSoftwareStruct(@Ptr long name, @Ptr long version);
	/**
	 * Original signature : <code>ILibrary* createLibraryStruct(const char[], const char[])</code><br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h:34</i>
	 */
	public static Pointer<LitlaunchLibrary > createLibraryStruct(Pointer<Byte > name, Pointer<Byte > version) {
		return Pointer.pointerToAddress(createLibraryStruct(Pointer.getPeer(name), Pointer.getPeer(version)), PointerIO.getInstance(LitlaunchLibrary.class));
	}
	@Ptr 
	protected native static long createLibraryStruct(@Ptr long name, @Ptr long version);
	/**
	 * Original signature : <code>IPlugin* createPluginStruct(const char[], const char[], ILibrary*)</code><br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h:35</i>
	 */
	public static Pointer<LitlaunchPlugin > createPluginStruct(Pointer<Byte > name, Pointer<Byte > version, Pointer<LitlaunchLibrary > requiredLibrary) {
		return Pointer.pointerToAddress(createPluginStruct(Pointer.getPeer(name), Pointer.getPeer(version), Pointer.getPeer(requiredLibrary)), PointerIO.getInstance(LitlaunchPlugin.class));
	}
	@Ptr 
	protected native static long createPluginStruct(@Ptr long name, @Ptr long version, @Ptr long requiredLibrary);
	/**
	 * Original signature : <code>IComponent* createComponentStruct(const char[], ILibrary*)</code><br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h:36</i>
	 */
	public static Pointer<Component > createComponentStruct(Pointer<Byte > name, Pointer<LitlaunchLibrary > componentLibrary) {
		return Pointer.pointerToAddress(createComponentStruct(Pointer.getPeer(name), Pointer.getPeer(componentLibrary)), PointerIO.getInstance(Component.class));
	}
	@Ptr 
	protected native static long createComponentStruct(@Ptr long name, @Ptr long componentLibrary);
	/**
	 * Original signature : <code>ISoftware* initLibraryAPI()</code><br>
	 * <i>native declaration : /workspaces/LitLaunch/litlaunch-library-api/src/main/c/litlaunch-library-api.h:37</i>
	 */
	public static Pointer<Software > initLibraryAPI() {
		return Pointer.pointerToAddress(initLibraryAPI$2(), PointerIO.getInstance(Software.class));
	}
	@Ptr 
	@Name("initLibraryAPI") 
	protected native static long initLibraryAPI$2();
}
